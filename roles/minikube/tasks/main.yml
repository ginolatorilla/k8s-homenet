---
- name: Install Minikube
  tags: minikube_deps
  block:
    - name: Install Minikube and drivers
      ansible.builtin.package:
        name: "{{ item }}"
      loop:
        - minikube
        - socket_vmnet
        - qemu
    - name: Install services for Homebrew
      community.general.homebrew_tap:
        name: homebrew/services
    - name: Start service
      ansible.builtin.command:
        cmd: brew services restart socket_vmnet
        creates: /Library/LaunchDaemons/homebrew.mxcl.socket_vmnet.plist
      environment:
        HOMEBREW_NO_INSTALL_FROM_API: "1"
      become: true

- name: Launch Minikube
  tags: minikube
  block:
    - name: Destroy cluster if rebuilding
      when: rebuild_cluster
      ansible.builtin.command:
        cmd: minikube delete
        removes: ~/.minikube/machines/minikube/config.json
    - name: Create cluster
      ansible.builtin.command:
        cmd: minikube start --driver qemu --network socket_vmnet
        creates: ~/.minikube/machines/minikube/config.json
    - name: Workaround to force node DNS
      ansible.builtin.command:
        cmd: "minikube ssh 'sudo rm /etc/resolv.conf && echo nameserver {{ minikube_node_dns }} | sudo tee /etc/resolv.conf && nslookup google.com'"
      register: minikube_ssh
      changed_when: minikube_ssh.rc != 0
    - name: Enable addons
      ansible.builtin.command:
        cmd: minikube addons enable {{ item }}
      register: minikube_addons_enable
      changed_when: minikube_addons_enable.rc != 0
      loop:
        - ingress

- name: Bootstrap the cluster
  tags: kubernetes
  block:
    - name: Install kubectl
      community.general.homebrew:
        name: kubernetes-cli
    - name: Create temporary directory for the ArgoCD manifest
      ansible.builtin.tempfile:
        state: directory
      register: minikube_fetch_argocd_destination_dir
    - name: Download ArgoCD manifest
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/argoproj/argo-cd/master/manifests/install.yaml
        dest: "{{ minikube_fetch_argocd_destination_dir.path }}/install.yaml"
        mode: '0644'
        validate_certs: "{{ ansible_os_family != 'Darwin' }}"
      register: minikube_fetch_argocd_manifest
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        context: minikube
        resource_definition:
          api_version: v1
          kind: Namespace
          metadata:
            name: argocd
    - name: Install ArgoCD
      kubernetes.core.k8s:
        context: minikube
        namespace: argocd
        src: "{{ minikube_fetch_argocd_manifest.dest }}"
