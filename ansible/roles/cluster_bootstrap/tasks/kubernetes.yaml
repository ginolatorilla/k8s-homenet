---
- name: Kubernetes binaries
  block:
    - name: Kubernetes apt repo signing keys
      ansible.builtin.apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key
        keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Kubernetes apt repo
      ansible.builtin.apt_repository:
        repo: deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
        state: present

    - name: Kubernetes packages
      ansible.builtin.apt:
        update_cache: true
        package:
          - kubelet
          - kubeadm
          - kubectl

- name: Kubelet as a systemd service
  ansible.builtin.systemd_service:
    name: kubelet
    enabled: true
    masked: false
    state: started

- name: Cluster bootstrapping
  ansible.builtin.command:
    cmd: kubeadm init --pod-network-cidr "10.85.0.0/16" --cri-socket=unix:///var/run/crio/crio.sock # TODO: pod cidr
    creates: /etc/kubernetes/manifests/*.yaml
  when: kubernetes_node_type == "control-leader"

# TODO: add handling when token expires
- name: Cluster join token
  when: kubernetes_node_type == "control-leader"
  block:
    - name: Parse token from kubeadm
      ansible.builtin.command: kubeadm token list -o jsonpath={.token}
      register: kubernetes_kubeadm_token_list
      changed_when: kubernetes_kubeadm_token_list.rc != 0
    - name: Save token to facts
      ansible.builtin.set_fact:
        kubernetes_join_token: "{{ kubernetes_kubeadm_token_list.stdout }}"
        cacheable: true

- name: Join cluster
  when: kubernetes_node_type == "worker"
  ansible.builtin.command:
    cmd: "kubeadm join 192.168.100.25:6443 --token {{ kubernetes_join_token }} --discovery-token-unsafe-skip-ca-verification" # TODO: change apiserver listener
    creates: /etc/kubernetes/pki/ca.crt
